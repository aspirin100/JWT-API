// Code generated by MockGen. DO NOT EDIT.
// Source: service.go
//
// Generated by this command:
//
//	mockgen -source=service.go -destination=service_mocks_test.go -package=token_test
//

// Package token_test is a generated GoMock package.
package token_test

import (
	context "context"
	reflect "reflect"

	token "github.com/aspirin100/JWT-API/internal/token"
	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockNotifier is a mock of Notifier interface.
type MockNotifier struct {
	ctrl     *gomock.Controller
	recorder *MockNotifierMockRecorder
	isgomock struct{}
}

// MockNotifierMockRecorder is the mock recorder for MockNotifier.
type MockNotifierMockRecorder struct {
	mock *MockNotifier
}

// NewMockNotifier creates a new mock instance.
func NewMockNotifier(ctrl *gomock.Controller) *MockNotifier {
	mock := &MockNotifier{ctrl: ctrl}
	mock.recorder = &MockNotifierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNotifier) EXPECT() *MockNotifierMockRecorder {
	return m.recorder
}

// Notify mocks base method.
func (m *MockNotifier) Notify(ctx context.Context, userID uuid.UUID, subject, message string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Notify", ctx, userID, subject, message)
	ret0, _ := ret[0].(error)
	return ret0
}

// Notify indicates an expected call of Notify.
func (mr *MockNotifierMockRecorder) Notify(ctx, userID, subject, message any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Notify", reflect.TypeOf((*MockNotifier)(nil).Notify), ctx, userID, subject, message)
}

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
	isgomock struct{}
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// BeginTx mocks base method.
func (m *MockRepository) BeginTx(ctx context.Context) (context.Context, token.CommitOrRollback, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BeginTx", ctx)
	ret0, _ := ret[0].(context.Context)
	ret1, _ := ret[1].(token.CommitOrRollback)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// BeginTx indicates an expected call of BeginTx.
func (mr *MockRepositoryMockRecorder) BeginTx(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeginTx", reflect.TypeOf((*MockRepository)(nil).BeginTx), ctx)
}

// InsertRefreshToken mocks base method.
func (m *MockRepository) InsertRefreshToken(ctx context.Context, pairID, userID uuid.UUID, refreshToken string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertRefreshToken", ctx, pairID, userID, refreshToken)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertRefreshToken indicates an expected call of InsertRefreshToken.
func (mr *MockRepositoryMockRecorder) InsertRefreshToken(ctx, pairID, userID, refreshToken any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertRefreshToken", reflect.TypeOf((*MockRepository)(nil).InsertRefreshToken), ctx, pairID, userID, refreshToken)
}

// SetRefreshTokenUsed mocks base method.
func (m *MockRepository) SetRefreshTokenUsed(ctx context.Context, pairID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetRefreshTokenUsed", ctx, pairID)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetRefreshTokenUsed indicates an expected call of SetRefreshTokenUsed.
func (mr *MockRepositoryMockRecorder) SetRefreshTokenUsed(ctx, pairID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetRefreshTokenUsed", reflect.TypeOf((*MockRepository)(nil).SetRefreshTokenUsed), ctx, pairID)
}
